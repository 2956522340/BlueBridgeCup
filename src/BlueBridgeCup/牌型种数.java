package BlueBridgeCup;

/**
 * @author guh
 * @description 
 * 牌型种数
 * 
 * 小明被劫到X赌城，被迫与其他3人玩牌
 * 一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张
 * 这时，小明脑子里突然冒出一个问题：
 * 如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？
 * 
 * 请填写该整数。
 */
public class 牌型种数 {
	static int result = 0;		// 存储结果种数
	public static void main(String[] args) {
		select(0, 0);
		System.out.println(result);
	}
	
	public static void select(int x, int y) {		// 递归 x:1 - K y:13张牌
		if (x > 13 || y > 13) {
			return;
		}
		if (x == 13 && y == 13) {
			result++;
			return;
		}
		for (int i = 0; i < 5; i++) {		// 0, 1, 2, 3, 4,共5种情况
			select(x + 1, y + i);      // y + i 已经取得的牌数 + 表示5种的数量之和
		}
	}
}

/**
 * 思路：
 * 		可以拿十三次每次拿一张牌，但每张牌都要有十三种情况拿到所以复杂度是 13^13 复杂度过高。所以换一种思路
 * 		13种牌每张牌只有四张，所以我们拿十三张牌每种牌的个数可能是0, 1, 2, 3, 4张，共5种情况。
 * 		所以我们采取递归思想：
 * 		select(int x, int y);
 * 		x:目前在拿哪张牌（牌型）。
 * 		y:总共拿了多少张牌。
 * 		这样每张牌从十三种情况变为了5种，复杂度变为了 5^13，并且如果在中途 y > 13 那么可以直接舍弃这种情况（比如1取了4张，2取了4张，3取了4张，4取了
 *      4张 总共已经16张牌舍弃），如果取到了第十三种牌型的牌，而且总数正好是13则种数加1
 */
